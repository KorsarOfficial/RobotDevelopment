# RISDK: Обзор и основные принципы работы

## Введение
RISDK (RoboIntellect SDK) - это программный интерфейс, предназначенный для разработки приложений в области робототехники. Данный SDK позволяет управлять различными робототехническими системами через единый интерфейс, абстрагируясь от конкретных аппаратных реализаций.

## Архитектура RISDK

### Компонентная модель
RISDK построен на основе компонентной архитектуры:
- **Компоненты** - базовые элементы, представляющие различные устройства и функциональные блоки роботов
- **Контроллеры** - управляющие элементы, осуществляющие взаимодействие с аппаратной частью
- **Связи** - соединения между компонентами, определяющие процесс передачи сигналов и данных

### Основные типы компонентов
1. **Манипуляторы** - роботы-манипуляторы различных конфигураций
2. **Захваты** - устройства для захвата и удержания объектов
3. **Датчики** - компоненты для получения информации о внешней среде и состоянии робота
4. **Контроллеры движения** - компоненты для планирования и выполнения движений
5. **Устройства ввода/вывода** - компоненты для взаимодействия с периферийными устройствами

## Принципы работы с RISDK

### Инициализация и настройка
```c
// Инициализация SDK
RISDK_HANDLE sdk_handle = RI_SDK_InitSDK();

// Проверка статуса инициализации
if (!RI_SDK_IsSDKInitialized(sdk_handle)) {
    printf("Ошибка инициализации SDK\n");
    return -1;
}

// Настройка параметров SDK
RI_SDK_SetLogLevel(sdk_handle, RI_SDK_LOG_LEVEL_INFO);
```

### Создание и управление компонентами
```c
// Создание компонента устройства
RISDK_COMPONENT_HANDLE device = RI_SDK_CreateDeviceComponent(sdk_handle, "MainDevice");

// Создание манипулятора
RISDK_COMPONENT_HANDLE manipulator = RI_SDK_CreateManipulatorComponent(sdk_handle, "Robot1");

// Создание захвата
RISDK_COMPONENT_HANDLE gripper = RI_SDK_CreateGripperComponent(sdk_handle, "Gripper1");

// Связывание компонентов
RI_SDK_LinkManipulatorToController(sdk_handle, device, manipulator);
RI_SDK_LinkGripperToManipulator(sdk_handle, manipulator, gripper);
```

### Инициализация и запуск компонентов
```c
// Инициализация компонентов
RI_SDK_exec_Device_Initialize(device);
RI_SDK_exec_Manipulator_Initialize(manipulator);
RI_SDK_exec_Gripper_Initialize(gripper);

// Запуск компонентов
RI_SDK_exec_Device_Enable(device);
RI_SDK_exec_Manipulator_Enable(manipulator);
```

### Выполнение операций
```c
// Установка параметров движения
RI_SDK_exec_Manipulator_SetSpeed(manipulator, 50.0); // 50% от максимальной скорости
RI_SDK_exec_Manipulator_SetAcceleration(manipulator, 30.0); // 30% от максимального ускорения

// Перемещение в заданную позицию (координаты Декарта)
RI_SDK_CartesianPosition target_pos = {250.0, 0.0, 300.0, 0.0, 180.0, 0.0};
RI_SDK_exec_Manipulator_MoveToPosition(manipulator, &target_pos, RI_SDK_MOVEMENT_TYPE_LINEAR);

// Управление захватом
RI_SDK_exec_Gripper_Open(gripper);
RI_SDK_exec_Gripper_Close(gripper);
```

### Освобождение ресурсов
```c
// Деактивация компонентов
RI_SDK_exec_Manipulator_Disable(manipulator);
RI_SDK_exec_Device_Disable(device);

// Удаление компонентов
RI_SDK_DestroyComponent(gripper);
RI_SDK_DestroyComponent(manipulator);
RI_SDK_DestroyComponent(device);

// Освобождение ресурсов SDK
RI_SDK_DestroySDK(sdk_handle);
```

## Обработка ошибок и событий

### Проверка статуса операций
```c
// Выполнение операции и проверка результата
RISDK_RESULT result = RI_SDK_exec_Manipulator_MoveToPosition(manipulator, &target_pos, RI_SDK_MOVEMENT_TYPE_LINEAR);
if (result != RI_SDK_RESULT_SUCCESS) {
    RI_SDK_ErrorInfo error_info;
    RI_SDK_GetLastError(sdk_handle, &error_info);
    printf("Ошибка перемещения: %s (код %d)\n", error_info.message, error_info.code);
}
```

### Обработка событий
```c
// Функция-обработчик события
void OnMovementCompleted(RISDK_COMPONENT_HANDLE component, void* user_data) {
    printf("Движение завершено\n");
}

// Регистрация обработчика
RI_SDK_exec_Manipulator_RegisterMovementCompletedCallback(manipulator, OnMovementCompleted, NULL);
```

## Режимы работы

### Синхронный режим
В синхронном режиме функции SDK блокируют выполнение программы до завершения операции:
```c
// Синхронное выполнение операции
RI_SDK_exec_Manipulator_MoveToPosition(manipulator, &target_pos, RI_SDK_MOVEMENT_TYPE_LINEAR);
printf("Движение завершено\n"); // Этот код выполнится только после завершения движения
```

### Асинхронный режим
В асинхронном режиме функции SDK возвращают управление немедленно, а завершение операции отслеживается через обратные вызовы:
```c
// Регистрация обработчика завершения движения
RI_SDK_exec_Manipulator_RegisterMovementCompletedCallback(manipulator, OnMovementCompleted, NULL);

// Асинхронное выполнение операции
RI_SDK_exec_Manipulator_MoveToPositionAsync(manipulator, &target_pos, RI_SDK_MOVEMENT_TYPE_LINEAR);
printf("Команда движения отправлена\n"); // Этот код выполнится немедленно
```

## Работа с конфигурациями

### Загрузка конфигурации
```c
// Загрузка конфигурации из файла
RI_SDK_LoadConfigFromFile(sdk_handle, "config.json");
```

### Установка параметров конфигурации программно
```c
// Установка параметров для компонента
RI_SDK_SetComponentParameter(manipulator, "max_speed", "100.0");
RI_SDK_SetComponentParameter(manipulator, "max_acceleration", "50.0");
```

### Сохранение конфигурации
```c
// Сохранение текущей конфигурации в файл
RI_SDK_SaveConfigToFile(sdk_handle, "config_backup.json");
```

## Пример полного приложения на Python

```python
import risdk
import time

def main():
    # Инициализация SDK
    sdk = risdk.InitSDK()
    
    try:
        # Создание компонентов
        device = risdk.CreateDeviceComponent(sdk, "Device")
        manipulator = risdk.CreateManipulatorComponent(sdk, "Robot")
        gripper = risdk.CreateGripperComponent(sdk, "Gripper")
        
        # Связывание компонентов
        risdk.LinkManipulatorToController(sdk, device, manipulator)
        risdk.LinkGripperToManipulator(sdk, manipulator, gripper)
        
        # Инициализация компонентов
        risdk.exec_Device_Initialize(device)
        risdk.exec_Manipulator_Initialize(manipulator)
        risdk.exec_Gripper_Initialize(gripper)
        
        # Активация компонентов
        risdk.exec_Device_Enable(device)
        risdk.exec_Manipulator_Enable(manipulator)
        
        # Установка параметров движения
        risdk.exec_Manipulator_SetSpeed(manipulator, 50.0)
        risdk.exec_Manipulator_SetAcceleration(manipulator, 30.0)
        
        # Перемещение в исходную позицию
        home_pos = risdk.CartesianPosition(300.0, 0.0, 400.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, home_pos, risdk.MOVEMENT_TYPE_JOINT)
        
        # Открытие захвата
        risdk.exec_Gripper_Open(gripper)
        
        # Перемещение к объекту
        object_pos = risdk.CartesianPosition(250.0, 50.0, 100.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, object_pos, risdk.MOVEMENT_TYPE_LINEAR)
        
        # Захват объекта
        risdk.exec_Gripper_Close(gripper)
        time.sleep(1.0)  # Ожидание для надежного захвата
        
        # Подъем объекта
        lift_pos = risdk.CartesianPosition(250.0, 50.0, 300.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, lift_pos, risdk.MOVEMENT_TYPE_LINEAR)
        
        # Перемещение объекта в целевую позицию
        target_pos = risdk.CartesianPosition(0.0, -200.0, 300.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, target_pos, risdk.MOVEMENT_TYPE_LINEAR)
        
        # Опускание объекта
        place_pos = risdk.CartesianPosition(0.0, -200.0, 100.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, place_pos, risdk.MOVEMENT_TYPE_LINEAR)
        
        # Освобождение объекта
        risdk.exec_Gripper_Open(gripper)
        time.sleep(0.5)
        
        # Возврат в исходную позицию
        risdk.exec_Manipulator_MoveToPosition(manipulator, home_pos, risdk.MOVEMENT_TYPE_JOINT)
        
    finally:
        # Деактивация компонентов
        risdk.exec_Manipulator_Disable(manipulator)
        risdk.exec_Device_Disable(device)
        
        # Удаление компонентов
        risdk.DestroyComponent(gripper)
        risdk.DestroyComponent(manipulator)
        risdk.DestroyComponent(device)
        
        # Освобождение ресурсов SDK
        risdk.DestroySDK(sdk)

if __name__ == "__main__":
    main()
```

## Лучшие практики работы с RISDK

1. **Всегда проверяйте результаты вызовов** функций SDK и обрабатывайте возможные ошибки.
2. **Правильно освобождайте ресурсы** при завершении работы с SDK, даже в случае возникновения ошибок.
3. **Используйте механизмы обратных вызовов** для эффективной обработки асинхронных операций.
4. **Настраивайте уровень логирования** в соответствии с этапом разработки (подробный для отладки, минимальный для релиза).
5. **Проверяйте ограничения** рабочей области и параметров движения перед выполнением операций.
6. **Используйте инкапсуляцию** для создания высокоуровневых абстракций поверх базового API.
7. **Тестируйте ваше приложение** в эмуляционном режиме перед запуском на реальном оборудовании.

## Отладка и профилирование

### Настройка логирования
```c
// Установка уровня логирования
RI_SDK_SetLogLevel(sdk_handle, RI_SDK_LOG_LEVEL_DEBUG);

// Настройка вывода логов в файл
RI_SDK_SetLogFile(sdk_handle, "risdk_log.txt");
```

### Отладка в эмуляционном режиме
```c
// Включение эмуляционного режима
RI_SDK_EnableEmulationMode(sdk_handle, true);
```

### Профилирование производительности
```c
// Включение профилирования
RI_SDK_EnableProfiling(sdk_handle, true);

// Получение результатов профилирования
RI_SDK_ProfilingResults results;
RI_SDK_GetProfilingResults(sdk_handle, &results);
```

## Заключение
RISDK предоставляет гибкий и мощный интерфейс для разработки приложений в области робототехники. Благодаря компонентной архитектуре и унифицированному API, разработчики могут создавать сложные робототехнические системы, абстрагируясь от специфики конкретного оборудования и сосредотачиваясь на реализации необходимой функциональности. 