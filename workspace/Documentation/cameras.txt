# Работа с камерами в RISDK

## Введение
Камеры являются важной частью робототехнических систем, обеспечивая визуальное восприятие окружающего мира и возможность распознавания объектов. RISDK предоставляет широкие возможности для подключения и использования различных типов камер в робототехнических приложениях.

## Поддерживаемые типы камер
RISDK поддерживает работу со следующими типами камер:
1. **USB-камеры** - стандартные веб-камеры, подключаемые через USB порт
2. **IP-камеры** - сетевые камеры, работающие по протоколам HTTP, RTSP
3. **Промышленные камеры** - специализированные камеры с интерфейсами GigE Vision, USB3 Vision
4. **Встроенные камеры** - камеры, интегрированные в устройства
5. **Стереокамеры** - системы из двух или более камер для получения объемного изображения
6. **Камеры глубины** - устройства, формирующие карту глубины сцены (например, Microsoft Kinect, Intel RealSense)

## Инициализация и настройка камер

### Создание и инициализация компонента камеры
```c
// Создание компонента камеры
RISDK_COMPONENT_HANDLE camera = RI_SDK_CreateCameraComponent(sdk_handle, "MainCamera");

// Связывание камеры с устройством
RI_SDK_LinkCameraToController(sdk_handle, device, camera);

// Установка параметров камеры
RI_SDK_SetComponentParameter(camera, "camera_type", "usb");
RI_SDK_SetComponentParameter(camera, "device_id", "0"); // или "/dev/video0" на Linux
// Для IP-камеры
// RI_SDK_SetComponentParameter(camera, "camera_type", "ip");
// RI_SDK_SetComponentParameter(camera, "url", "rtsp://admin:password@192.168.1.100:554/stream");

// Инициализация камеры
RI_SDK_exec_Camera_Initialize(camera);

// Включение камеры
RI_SDK_exec_Camera_Enable(camera);
```

### Настройка параметров камеры
```c
// Установка разрешения
RI_SDK_exec_Camera_SetResolution(camera, 1280, 720);

// Установка частоты кадров
RI_SDK_exec_Camera_SetFrameRate(camera, 30.0);

// Настройка экспозиции
RI_SDK_exec_Camera_SetExposure(camera, 100); // в миллисекундах или -1 для авто

// Настройка баланса белого
RI_SDK_exec_Camera_SetWhiteBalance(camera, 5000); // в Кельвинах или -1 для авто

// Настройка яркости, контраста и других параметров
RI_SDK_exec_Camera_SetBrightness(camera, 50); // 0-100
RI_SDK_exec_Camera_SetContrast(camera, 50); // 0-100
RI_SDK_exec_Camera_SetSaturation(camera, 50); // 0-100
```

## Получение и обработка изображений

### Захват изображения
```c
// Захват одиночного кадра
RI_SDK_ImageData image;
RISDK_RESULT result = RI_SDK_exec_Camera_CaptureFrame(camera, &image);
if (result == RI_SDK_RESULT_SUCCESS) {
    // Обработка полученного изображения
    // ...
    
    // Освобождение ресурсов изображения после использования
    RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
}
```

### Работа с потоком изображений
```c
// Функция-обработчик нового кадра
void OnNewFrame(RISDK_COMPONENT_HANDLE component, RI_SDK_ImageData* image, void* user_data) {
    // Обработка полученного изображения
    // ...
    
    // Освобождение ресурсов не требуется - SDK сделает это автоматически
}

// Регистрация обработчика
RI_SDK_exec_Camera_RegisterFrameCallback(camera, OnNewFrame, NULL);

// Запуск потока кадров
RI_SDK_exec_Camera_StartStreaming(camera);

// ...

// Остановка потока кадров
RI_SDK_exec_Camera_StopStreaming(camera);
```

### Сохранение изображения в файл
```c
// Захват кадра
RI_SDK_ImageData image;
RI_SDK_exec_Camera_CaptureFrame(camera, &image);

// Сохранение в файл
RI_SDK_exec_Camera_SaveImageToFile(camera, &image, "captured_image.jpg", RI_SDK_IMAGE_FORMAT_JPEG, 90);

// Освобождение ресурсов
RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
```

## Преобразование и анализ изображений

### Преобразование цветового пространства
```c
// Преобразование RGB в оттенки серого
RI_SDK_ImageData gray_image;
RI_SDK_exec_Camera_ConvertColorSpace(camera, &image, &gray_image, RI_SDK_COLOR_SPACE_GRAY);

// Использование преобразованного изображения
// ...

// Освобождение ресурсов
RI_SDK_exec_Camera_ReleaseFrame(camera, &gray_image);
RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
```

### Изменение размера изображения
```c
// Изменение размера изображения
RI_SDK_ImageData resized_image;
RI_SDK_exec_Camera_ResizeImage(camera, &image, &resized_image, 640, 480, RI_SDK_RESIZE_BILINEAR);

// Использование измененного изображения
// ...

// Освобождение ресурсов
RI_SDK_exec_Camera_ReleaseFrame(camera, &resized_image);
RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
```

### Распознавание объектов и маркеров
```c
// Распознавание ArUco маркеров
RI_SDK_MarkerDetectionResult markers;
RI_SDK_exec_Camera_DetectMarkers(camera, &image, RI_SDK_MARKER_TYPE_ARUCO, &markers);

// Обработка найденных маркеров
for (int i = 0; i < markers.count; i++) {
    printf("Маркер ID: %d, позиция: (%.2f, %.2f)\n", 
           markers.markers[i].id, 
           markers.markers[i].center_x, 
           markers.markers[i].center_y);
}

// Освобождение ресурсов
RI_SDK_exec_Camera_ReleaseMarkerDetectionResult(camera, &markers);
RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
```

## Калибровка камеры

### Получение внутренних параметров камеры
```c
// Получение внутренних параметров
RI_SDK_CameraIntrinsics intrinsics;
RI_SDK_exec_Camera_GetIntrinsics(camera, &intrinsics);

// Использование параметров
printf("Фокусное расстояние: (%.2f, %.2f)\n", intrinsics.fx, intrinsics.fy);
printf("Оптический центр: (%.2f, %.2f)\n", intrinsics.cx, intrinsics.cy);
printf("Коэффициенты дисторсии: [%.2f, %.2f, %.2f, %.2f, %.2f]\n", 
       intrinsics.distortion[0], intrinsics.distortion[1], 
       intrinsics.distortion[2], intrinsics.distortion[3], 
       intrinsics.distortion[4]);
```

### Калибровка камеры
```c
// Запуск процесса калибровки
RI_SDK_CalibrationType calibration_type;
calibration_type.type = RI_SDK_CALIBRATION_CHESSBOARD;
calibration_type.params.chessboard.width = 9;
calibration_type.params.chessboard.height = 6;
calibration_type.params.chessboard.square_size = 25.0; // в миллиметрах

// Начало процесса калибровки
RI_SDK_exec_Camera_StartCalibration(camera, &calibration_type);

// Добавление кадра калибровки
RI_SDK_ImageData image;
RI_SDK_exec_Camera_CaptureFrame(camera, &image);
RI_SDK_exec_Camera_AddCalibrationFrame(camera, &image);
RI_SDK_exec_Camera_ReleaseFrame(camera, &image);

// ... добавить еще кадров (рекомендуется 10-20 с разных ракурсов)

// Завершение процесса калибровки
RI_SDK_CameraIntrinsics intrinsics;
RI_SDK_exec_Camera_FinishCalibration(camera, &intrinsics);

// Сохранение параметров калибровки
RI_SDK_exec_Camera_SaveIntrinsics(camera, &intrinsics, "camera_calibration.json");
```

## Работа со стереокамерами и камерами глубины

### Инициализация стереокамеры
```c
// Создание левой и правой камер
RISDK_COMPONENT_HANDLE left_camera = RI_SDK_CreateCameraComponent(sdk_handle, "LeftCamera");
RISDK_COMPONENT_HANDLE right_camera = RI_SDK_CreateCameraComponent(sdk_handle, "RightCamera");

// Создание стереокамеры
RISDK_COMPONENT_HANDLE stereo_camera = RI_SDK_CreateStereoCameraComponent(sdk_handle, "StereoCamera");

// Связывание камер
RI_SDK_LinkCameraToStereoCamera(sdk_handle, left_camera, stereo_camera, RI_SDK_STEREO_CAMERA_LEFT);
RI_SDK_LinkCameraToStereoCamera(sdk_handle, right_camera, stereo_camera, RI_SDK_STEREO_CAMERA_RIGHT);

// Инициализация камер
RI_SDK_exec_Camera_Initialize(left_camera);
RI_SDK_exec_Camera_Initialize(right_camera);
RI_SDK_exec_StereoCamera_Initialize(stereo_camera);

// Включение камер
RI_SDK_exec_Camera_Enable(left_camera);
RI_SDK_exec_Camera_Enable(right_camera);
RI_SDK_exec_StereoCamera_Enable(stereo_camera);
```

### Получение карты глубины
```c
// Захват кадров с обеих камер
RI_SDK_ImageData left_image, right_image;
RI_SDK_exec_Camera_CaptureFrame(left_camera, &left_image);
RI_SDK_exec_Camera_CaptureFrame(right_camera, &right_image);

// Вычисление карты глубины
RI_SDK_ImageData depth_map;
RI_SDK_exec_StereoCamera_ComputeDepthMap(stereo_camera, &left_image, &right_image, &depth_map);

// Использование карты глубины
// ...

// Освобождение ресурсов
RI_SDK_exec_Camera_ReleaseFrame(left_camera, &left_image);
RI_SDK_exec_Camera_ReleaseFrame(right_camera, &right_image);
RI_SDK_exec_Camera_ReleaseFrame(stereo_camera, &depth_map);
```

### Работа с камерой глубины (например, RealSense)
```c
// Создание компонента камеры глубины
RISDK_COMPONENT_HANDLE depth_camera = RI_SDK_CreateDepthCameraComponent(sdk_handle, "DepthCamera");

// Установка параметров камеры
RI_SDK_SetComponentParameter(depth_camera, "camera_type", "realsense");
RI_SDK_SetComponentParameter(depth_camera, "device_id", "");

// Инициализация камеры
RI_SDK_exec_DepthCamera_Initialize(depth_camera);
RI_SDK_exec_DepthCamera_Enable(depth_camera);

// Получение цветного изображения и карты глубины
RI_SDK_ImageData color_image, depth_image;
RI_SDK_exec_DepthCamera_CaptureColorFrame(depth_camera, &color_image);
RI_SDK_exec_DepthCamera_CaptureDepthFrame(depth_camera, &depth_image);

// Получение облака точек
RI_SDK_PointCloud point_cloud;
RI_SDK_exec_DepthCamera_CreatePointCloud(depth_camera, &depth_image, &color_image, &point_cloud);

// Работа с облаком точек
printf("Количество точек: %d\n", point_cloud.point_count);
// Доступ к точкам: point_cloud.points[i].x, point_cloud.points[i].y, point_cloud.points[i].z,
//                  point_cloud.points[i].r, point_cloud.points[i].g, point_cloud.points[i].b

// Сохранение облака точек в файл
RI_SDK_exec_DepthCamera_SavePointCloudToFile(depth_camera, &point_cloud, "point_cloud.ply", RI_SDK_POINT_CLOUD_FORMAT_PLY);

// Освобождение ресурсов
RI_SDK_exec_DepthCamera_ReleasePointCloud(depth_camera, &point_cloud);
RI_SDK_exec_Camera_ReleaseFrame(depth_camera, &color_image);
RI_SDK_exec_Camera_ReleaseFrame(depth_camera, &depth_image);
```

## Использование камер для визуального сервоуправления

### Отслеживание объекта и перемещение к нему
```c
// Функция для отслеживания объекта
void TrackAndMoveToObject(RISDK_COMPONENT_HANDLE camera, RISDK_COMPONENT_HANDLE manipulator) {
    // Захват кадра
    RI_SDK_ImageData image;
    RI_SDK_exec_Camera_CaptureFrame(camera, &image);
    
    // Обнаружение объекта (например, ArUco маркер)
    RI_SDK_MarkerDetectionResult markers;
    RI_SDK_exec_Camera_DetectMarkers(camera, &image, RI_SDK_MARKER_TYPE_ARUCO, &markers);
    
    if (markers.count > 0) {
        // Получение 3D-координат маркера
        RI_SDK_CameraIntrinsics intrinsics;
        RI_SDK_exec_Camera_GetIntrinsics(camera, &intrinsics);
        
        // Преобразование 2D координат в 3D
        RI_SDK_CartesianPosition marker_position;
        RI_SDK_exec_Camera_ImageToWorld(
            camera, 
            markers.markers[0].center_x, 
            markers.markers[0].center_y, 
            markers.markers[0].distance, // Расстояние до маркера
            &marker_position
        );
        
        // Перемещение манипулятора к объекту
        RI_SDK_exec_Manipulator_MoveToPosition(manipulator, &marker_position, RI_SDK_MOVEMENT_TYPE_LINEAR);
    }
    
    // Освобождение ресурсов
    RI_SDK_exec_Camera_ReleaseMarkerDetectionResult(camera, &markers);
    RI_SDK_exec_Camera_ReleaseFrame(camera, &image);
}
```

## Пример полного приложения с использованием камеры на Python

```python
import risdk
import time
import cv2
import numpy as np

def main():
    # Инициализация SDK
    sdk = risdk.InitSDK()
    
    try:
        # Создание компонентов
        device = risdk.CreateDeviceComponent(sdk, "Device")
        manipulator = risdk.CreateManipulatorComponent(sdk, "Robot")
        camera = risdk.CreateCameraComponent(sdk, "Camera")
        
        # Связывание компонентов
        risdk.LinkManipulatorToController(sdk, device, manipulator)
        risdk.LinkCameraToController(sdk, device, camera)
        
        # Инициализация компонентов
        risdk.exec_Device_Initialize(device)
        risdk.exec_Manipulator_Initialize(manipulator)
        risdk.exec_Camera_Initialize(camera)
        
        # Активация компонентов
        risdk.exec_Device_Enable(device)
        risdk.exec_Manipulator_Enable(manipulator)
        risdk.exec_Camera_Enable(camera)
        
        # Настройка камеры
        risdk.exec_Camera_SetResolution(camera, 1280, 720)
        risdk.exec_Camera_SetFrameRate(camera, 30.0)
        
        # Перемещение манипулятора в исходную позицию
        home_pos = risdk.CartesianPosition(300.0, 0.0, 400.0, 0.0, 180.0, 0.0)
        risdk.exec_Manipulator_MoveToPosition(manipulator, home_pos, risdk.MOVEMENT_TYPE_JOINT)
        
        # Захват 10 кадров и их сохранение
        for i in range(10):
            # Захват кадра
            image = risdk.exec_Camera_CaptureFrame(camera)
            
            # Преобразование в формат numpy для работы с OpenCV
            np_image = risdk.ImageToNumpy(image)
            
            # Обработка изображения с помощью OpenCV
            gray = cv2.cvtColor(np_image, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 100, 200)
            
            # Преобразование обратно в формат RISDK
            processed_image = risdk.NumpyToImage(edges)
            
            # Сохранение обработанного изображения
            risdk.exec_Camera_SaveImageToFile(camera, processed_image, f"processed_image_{i}.jpg", risdk.IMAGE_FORMAT_JPEG, 90)
            
            # Освобождение ресурсов
            risdk.exec_Camera_ReleaseFrame(camera, image)
            risdk.exec_Camera_ReleaseFrame(camera, processed_image)
            
            # Пауза между кадрами
            time.sleep(0.5)
        
        # Обнаружение ArUco маркеров на последнем кадре
        image = risdk.exec_Camera_CaptureFrame(camera)
        markers = risdk.exec_Camera_DetectMarkers(camera, image, risdk.MARKER_TYPE_ARUCO)
        
        if markers.count > 0:
            print(f"Обнаружено {markers.count} маркеров")
            for i in range(markers.count):
                marker = markers.markers[i]
                print(f"Маркер ID {marker.id} в позиции ({marker.center_x}, {marker.center_y})")
        else:
            print("Маркеры не обнаружены")
        
        risdk.exec_Camera_ReleaseMarkerDetectionResult(camera, markers)
        risdk.exec_Camera_ReleaseFrame(camera, image)
        
    finally:
        # Деактивация компонентов
        risdk.exec_Camera_Disable(camera)
        risdk.exec_Manipulator_Disable(manipulator)
        risdk.exec_Device_Disable(device)
        
        # Удаление компонентов
        risdk.DestroyComponent(camera)
        risdk.DestroyComponent(manipulator)
        risdk.DestroyComponent(device)
        
        # Освобождение ресурсов SDK
        risdk.DestroySDK(sdk)

if __name__ == "__main__":
    main()
```

## Рекомендации по работе с камерами

1. **Правильная настройка параметров камеры** - подберите оптимальные значения разрешения, частоты кадров, экспозиции и баланса белого в зависимости от условий освещения и задачи.
2. **Калибровка камеры** - для точных измерений и трехмерной реконструкции обязательно выполните калибровку камеры.
3. **Обработка ошибок** - всегда проверяйте результаты вызовов функций, связанных с камерой, так как возможны аппаратные сбои или отключения.
4. **Освобождение ресурсов** - не забывайте освобождать ресурсы изображений после использования, чтобы избежать утечек памяти.
5. **Производительность** - учитывайте, что обработка изображений может быть ресурсоемкой, оптимизируйте размер изображений и алгоритмы обработки.
6. **Многопоточность** - рассмотрите возможность обработки изображений в отдельном потоке, чтобы не блокировать основной поток управления роботом.
7. **Фильтрация данных** - применяйте фильтры для устранения шумов и артефактов на изображениях и в картах глубины.

## Возможные проблемы и их решения

1. **Низкое качество изображения**
   - *Проблема*: Размытое или зашумленное изображение
   - *Решение*: Проверьте освещение, настройте фокус и экспозицию, убедитесь в чистоте объектива

2. **Отсутствие сигнала с камеры**
   - *Проблема*: Функции захвата изображения возвращают ошибку
   - *Решение*: Проверьте подключение камеры, драйверы и права доступа к устройству

3. **Низкая частота кадров**
   - *Проблема*: Обработка изображений происходит медленно
   - *Решение*: Уменьшите разрешение, оптимизируйте алгоритмы обработки, используйте аппаратное ускорение

4. **Неточные результаты распознавания**
   - *Проблема*: Неточное обнаружение объектов или маркеров
   - *Решение*: Улучшите освещение, выполните калибровку камеры, используйте более подходящие алгоритмы обнаружения

5. **Проблемы с картой глубины**
   - *Проблема*: Шумная или неполная карта глубины
   - *Решение*: Проверьте калибровку стереокамеры, настройте параметры алгоритма стерео-сопоставления, улучшите освещение сцены 